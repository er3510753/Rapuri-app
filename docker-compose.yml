
services:
  # Django バックエンドサービス
  backend:
    build:
      context: ./backend
    # 開発用にリロードを有効にし、Gunicornを起動
    command: /app/.venv/bin/gunicorn ramen_project.wsgi:application --bind 0.0.0.0:8000 --reload
    volumes:
      # ローカルのソースコードをコンテナにマウント
      - ./backend:/app
      # .venvディレクトリが上書きされないように、匿名ボリュームとしてマウント
      - /app/.venv
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env # 参照先をbackend/.envに統一
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  # PostgreSQL データベースサービス
  db:
    image: postgres:13
    volumes:
      - pg_data:/var/lib/postgresql/data
    env_file:
      - ./backend/.env
    networks:
      - app_network
    healthcheck: # <-- このヘルスチェックを追加！
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # React Native (Expo) フロントエンドサービス
  frontend:
    build:
      context: ./frontend
    environment:
      - CI=1 # インタラクティブなプロンプトを無効化
    # Expo Goからアクセスできるように --tunnel オプションを追加
    # `npm start` は package.json の "start": "expo start" を実行します
    command: npm start -- --tunnel
    volumes:
      - ./frontend:/app
      # ホストのnode_modulesで上書きしないようにする
      - /app/node_modules
    ports:
      - "8081:8081"
      # Expo DevTools
      - "19000:19000"
    networks:
      - app_network

volumes:
  pg_data:

networks:
  app_network:
    driver: bridge